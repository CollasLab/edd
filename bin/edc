#!/usr/bin/env python
from enriched_domain_caller import get_sig_limit, util
import sys
import argparse

import numpy as np
import itertools

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('count_file', type=argparse.FileType('r'))
    parser.add_argument('output_file', type=argparse.FileType('w'))
    parser.add_argument('-f', '--chrom-filter', nargs='+', default=None)
    parser.add_argument('--chrom-filter-prefix', default='')
    parser.add_argument('-n', '--num-trials', type=int, default=100)
    parser.add_argument('-p', '--nprocs', type=int, default=4)
    parser.add_argument('-l', '--fdr', type=float, default=0.05)
    parser.add_argument('--only-monte-carlo', action='store_true')
    parser.add_argument('--only-observed-results', action='store_true')
    parser.add_argument('--ratio-of-positive-bins', type=float, default=.40)
    parser.add_argument('--times-std', type=float, default=3.0)
    parser.add_argument('--bin-score-function', choices=['log2-ratio', 'CI-lower'],
                        default='log2-ratio')
    args = parser.parse_args(sys.argv[1:])

    legal_chroms = util.parse_chrom_filter(args.chrom_filter, prefix=args.chrom_filter_prefix)
    scores_per_chrom = util.read_scores(args.count_file, legal_chroms,
                                             pos_bin_ratio=args.ratio_of_positive_bins,
                                             scorefunc=args.bin_score_function)
    chrom_sizes = util.as_chrom_sizes(scores_per_chrom)
    print 'Done'
    obs_res_full = util.obs_results(scores_per_chrom)
    obs_res = util.filter_smaller_than_Nsd_from_mean(obs_res_full, args.times_std)
    obs = [x.score for x in itertools.chain.from_iterable(obs_res.values())]
    if args.only_observed_results:
        print 'saving observed results as numpy binary file.'
        obs_full = [x.score for x in itertools.chain.from_iterable(obs_res_full.values())]
        np.save(args.output_file, np.array(obs_full))
        sys.exit(1)
    mc_res = util.monte_carlo(chrom_sizes, niter=args.num_trials, nprocs=args.nprocs)
    if args.only_monte_carlo:
        print 'saving monte carlo results as numpy binary file.'
        np.save(args.output_file, mc_res)
        sys.exit(1)
    fdr_score_lim = get_sig_limit(obs, mc_res, fdr_lim=args.fdr)

    print 'fdr_score_lim',fdr_score_lim
    util.write_segments(args.output_file, obs_res, segment_cutoff=fdr_score_lim)
