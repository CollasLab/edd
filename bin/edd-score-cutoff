#!/usr/bin/env python
import argparse
import collections
import sys

import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pylab as plt
import numpy as np

from enriched_domain_caller import preprocess, score_cutoff

struct = collections.namedtuple('container', 'scores min max')
optscore = collections.namedtuple('optscore', 'xs ys')

def as_scores(d):
    scores = [np.array([x.score for x in xs]) for xs in d._chrom_scores.values()]
    min_score = min(map(min, scores))
    max_score = max(map(max, scores))
    return struct(scores, min_score, max_score)

def compute_plot_values(a):
    xs = np.linspace(a.min, a.max, 300)
    ys = score_cutoff.information_score_for_range(a.scores, xs)
    return optscore(xs, ys)

def find_opt_score(r):
    y_max_idx = r.ys.argmax()
    return r.xs[y_max_idx], y_max_idx

def opt_has_ratio(a, cp):
    xs = np.concatenate(a.scores)
    return (xs > cp).sum() / float(len(xs))

def plot_results(pv, dst, title=None, arrow_coord=None):
    plt.plot(pv.xs, pv.ys)
    if title is not None:
        plt.title(title)
    if arrow_coord is not None:
        plt.annotate(**arrow_coord)
    plt.savefig(dst)

def get_arrow_coords(pv, i, ratio):
    # this is an alternative, arrow with text!
    ymax = pv.ys[i]
    x = pv.xs[i]
    txt = 'x=%.2f, r=%.2f' % (x, ratio)
    return dict(s=txt, xy=(x, ymax),
                 xytext=(pv.xs[len(pv.xs)/10.], ymax / 1.5),
                 arrowprops=dict(facecolor='black', shrink=0.05))

    # return dict(
    #     x=pv.xs[i],
    #     y=0.5*pv.ys[i],
    #     dx=0,
    #     dy=0.3*pv.ys[i],
    #     head_length=0.1*pv.ys[i],
    #     head_width=pv.xs[-1]/10.,
    #     width=pv.xs[-1]/50.,
    #     fc="k", ec="k"
    #     )

def run(src, dst):
    s = preprocess.GenomeBinScore.from_count_file(src, normalize=True)
    a = as_scores(s)
    pv = compute_plot_values(a)
    opt_score, idx = find_opt_score(pv)
    ratio = opt_has_ratio(a, opt_score)
    print 'pos bin ratio: %.2f' % ratio
    plot_results(pv, dst, title=src, arrow_coord=get_arrow_coords(pv, idx, ratio))
    if ratio > 0.5:
        print 'UNUSABLE RESULTS'
        print '\tpos bin ratio for max score too low'
        print '\ttry to increase the bin size'
    elif ratio > 0.45:
        print 'WARNING'
        print '\tratio of positive bins unusually high'
        print '\ttry to increase the bin size'


if __name__ == '__main__':
    p = argparse.ArgumentParser()
    p.add_argument('input_file', type=argparse.FileType('r'))
    p.add_argument('output_file', type=argparse.FileType('w'))
    args = p.parse_args(sys.argv[1:])
    run(args.input_file.name, args.output_file.name)
