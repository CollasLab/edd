from enriched_domain_caller import util
from collections import defaultdict
import sys
import argparse

def print_log2_binary(args):
    bins = util.read_counts(args.count_file, None)
    input_scale_factor = util.get_input_scale_factor(bins)
    nbins = util.normalize_bins(bins, input_scale_factor)
    sbins = util.score_bins(nbins, util.log2_score)
    lim_score = util.get_limit_score(sbins, args.ratio_of_positive_bins)
    print 'log2 lim score is %.2f' % lim_score

    chromd = defaultdict(list)
    for x in sorted(sbins):
        chromd[x.chrom].append(x)
    for chrom in sorted(chromd):
        for x in chromd[chrom]:
            bin_score = 1 if x.score >= lim_score else -1
            args.output_file.write('%s\t%s\t%s\t%.2f\n' % (x.chrom, x.start, x.end, bin_score))


def print_log2_ratio(args):
    bins = util.read_counts(args.count_file, None)
    input_scale_factor = util.get_input_scale_factor(bins)
    nbins = util.normalize_bins(bins, input_scale_factor)
    sbins = util.score_bins(nbins, util.log2_score)

    chromd = defaultdict(list)
    for x in sorted(sbins):
        chromd[x.chrom].append(x)
    for chrom in sorted(chromd):
        for x in chromd[chrom]:
            args.output_file.write('%s\t%s\t%s\t%.2f\n' % (x.chrom, x.start, x.end, x.score))


def print_float_scores(args):
    bins = util.read_counts(args.count_file, None)
    input_scale_factor = util.get_input_scale_factor(bins)
    nbins = util.normalize_bins(bins, input_scale_factor)
    sbins = util.score_bins(nbins, util.ci_lower_bound)

    chromd = defaultdict(list)
    for x in sorted(sbins):
        chromd[x.chrom].append(x)
    for chrom in sorted(chromd):
        for x in chromd[chrom]:
            args.output_file.write('%s\t%s\t%s\t%.2f\n' % (x.chrom, x.start, x.end, x.score))

def print_binary_scores(args):
    legal_chroms = None # means all
    scores_per_chrom = util.read_scores(args.count_file, legal_chroms,
                                             pos_bin_ratio=args.ratio_of_positive_bins)
    for chrom in sorted(scores_per_chrom):
        for x in scores_per_chrom[chrom]:
            args.output_file.write('%s\t%s\t%s\t%d\n' % (x.chrom, x.start, x.end, x.score))



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Various debug output')
    subparsers = parser.add_subparsers()

    p_bin_scores = subparsers.add_parser('binary-scores', help=('get all intervals above cutoff.'))
    p_bin_scores.add_argument('count_file', type=argparse.FileType('r'))
    p_bin_scores.add_argument('output_file', type=argparse.FileType('w'))
    p_bin_scores.add_argument('-r', '--ratio-of-positive-bins', type=float, default=.40)
    p_bin_scores.set_defaults(func=print_binary_scores)

    p_float_scores = subparsers.add_parser('float-scores', help=('get all intervals above cutoff.'))
    p_float_scores.add_argument('count_file', type=argparse.FileType('r'))
    p_float_scores.add_argument('output_file', type=argparse.FileType('w'))
    p_float_scores.set_defaults(func=print_float_scores)

    p_log2_ratio = subparsers.add_parser('log2-ratio', help=('get all intervals above cutoff.'))
    p_log2_ratio.add_argument('count_file', type=argparse.FileType('r'))
    p_log2_ratio.add_argument('output_file', type=argparse.FileType('w'))
    p_log2_ratio.set_defaults(func=print_log2_ratio)

    p_log2_binary = subparsers.add_parser('log2-binary', help=('get all intervals above cutoff.'))
    p_log2_binary.add_argument('count_file', type=argparse.FileType('r'))
    p_log2_binary.add_argument('output_file', type=argparse.FileType('w'))
    p_log2_binary.add_argument('-r', '--ratio-of-positive-bins', type=float, default=.40)
    p_log2_binary.set_defaults(func=print_log2_binary)


    args = parser.parse_args(sys.argv[1:])
    args.func(args)
